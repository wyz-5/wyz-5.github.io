<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于ctf_xinetd部署pwn环境</title>
      <link href="/2024/07/20/%E5%9F%BA%E4%BA%8Ectf_xinetd%E9%83%A8%E7%BD%B2pwn%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/07/20/%E5%9F%BA%E4%BA%8Ectf_xinetd%E9%83%A8%E7%BD%B2pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-克隆ctf-xinetd文件"><a href="#1-克隆ctf-xinetd文件" class="headerlink" title="1.克隆ctf_xinetd文件"></a>1.克隆ctf_xinetd文件</h2><pre><code># git clone https://github.com/Eadom/ctf_xinetd- 克隆好之后我们进入该目录-cd ctf_xinetd（cd 文件名 即进入该文件）- ls为查看该文件下的目录</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669dd7ea82f87.png" alt="20240722115405.png"></p><h3 id="ctf-xinetd目录下的文件介绍"><a href="#ctf-xinetd目录下的文件介绍" class="headerlink" title="ctf_xinetd目录下的文件介绍"></a>ctf_xinetd目录下的文件介绍</h3><pre><code>- bin目录下面放的是flag和pwn题目程序文件；默认是helloworld和flag，我们可以将它们替换成我们自己想要的flag和题目程序（这里我自己放入的文件为pwn_easy,改完之后记得保存）- 注意，bin目录下的二进制码需要有可执行权限（即原本的helloworld文件，包括后续自己需要拉进来的文件）我们使用chmod命令加权，一般加到750就好了---chmod 750 pwn_easy(文件名)</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669e23c917f00.png" alt="20240722171744.png"><br>    - ctf.xinetd文件中的这段配置是针对一个服务（可能是使用xinetd或类似的服务守护进程管理的服务）的配置文件片段。<br>    - Dockerfile文件，这里就不过多介绍了（具体参考我的另一篇blog：docker学习）</p><h2 id="2-修改ctf-xinetd文件中的一些配置"><a href="#2-修改ctf-xinetd文件中的一些配置" class="headerlink" title="2.修改ctf_xinetd文件中的一些配置"></a>2.修改ctf_xinetd文件中的一些配置</h2><p>ctf.xinetd和Dockerfile文件不改，你只能连接本地地址，即 nc 0.0.0.0 才能访问。我们下载的这个ctf_xinetd里面默认的端口是被映射到了9999，所以我们需要在ctf.xinetd和Dockerfile文件中进行修改。</p><h3 id="1）ctf-xinetd文件的修改"><a href="#1）ctf-xinetd文件的修改" class="headerlink" title="1）ctf.xinetd文件的修改"></a>1）ctf.xinetd文件的修改</h3><pre><code>- 将port改为80（我们搭建的这种ctf靶场一般在80端口）- 同时将./后面的helloworld改成你自己放在bin目录下的程序名- 修改完后wq保存退出</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669e2613d25eb.png" alt="20240722172731.png"></p><h3 id="2）Dockerfile文件的修改"><a href="#2）Dockerfile文件的修改" class="headerlink" title="2）Dockerfile文件的修改"></a>2）Dockerfile文件的修改</h3><pre><code>- 将文件末尾的expose改为80- 一般来说，我们拉进bin目录下的文件为二进制码文件，在这里我使用的是ubuntu22.04反编译出来的文件，所以还要进行一定的修改，将FROM后的ubuntu版本号更新（文件用什么版本号的ubuntu就修改为该版本号）然后图中标注的地方原本有两行目标RUN代码，将第一行删除- 修改完后wq保存退出</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669e2a3d4054f.png" alt="20240722174513.png"></p><h2 id="3-开始创建容器"><a href="#3-开始创建容器" class="headerlink" title="3.开始创建容器"></a>3.开始创建容器</h2><pre><code>- 使用下一行代码进行创建容器，pwn是你创建的镜像名称，可以自己随意取# docker build -t &quot;pwn&quot; .</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669e2b28a6d42.png" alt="20240722174900.png"><br>    - 创建好后，我们开始进行启用<br>    # docker run -d -p “0.0.0.0:8090:80” -h “pwn” –name&#x3D;”pwn” pwn<br><img src="https://pic.imge.cc/2024/07/22/669e30035778a.png" alt="20240722180955.png"><br>这里的8090端口换成你自己的希望放的一个未使用的端口，然后记得在自己的服务器防火墙中开启该端口权限。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><pre><code>* 一切完成后，该pwn环境部署完成，我们直接nc靶场地址端口</code></pre><p><img src="https://pic.imge.cc/2024/07/22/669e30f252a37.png" alt="20240722181354.png"><br>    * 然后正常按照ctf中pwn的题目解答得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker部署pwn环境</title>
      <link href="/2024/07/15/docker%E9%83%A8%E7%BD%B2pwn%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/07/15/docker%E9%83%A8%E7%BD%B2pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前沿准备工作"><a href="#1-前沿准备工作" class="headerlink" title="1.前沿准备工作"></a>1.前沿准备工作</h2><pre><code># docker-compose安装完成# 在自己的服务器中开放后续搭建pwn环境的所在端口</code></pre><p><img src="https://pic.imge.cc/2024/07/16/6696903f7304e.png" alt="20240716232124.png"></p><h2 id="2-docker起pwn环境"><a href="#2-docker起pwn环境" class="headerlink" title="2.docker起pwn环境"></a>2.docker起pwn环境</h2><pre><code># 使用步骤- 将所有pwn题目放入bin目录（注意名字不带特殊字符，因为会将文件名作为linux用户名（cd+文件名 即进入该文件下内容，然后ls查找该文件下目录，vi+文件名 进入文件编译界面）</code></pre><p><img src="https://pic.imge.cc/2024/07/16/6696948fc97db.png" alt="微信图片_20240716233847.png"><br>    - python initialize.py 初始化 设置端口和flag<br><img src="https://pic.imge.cc/2024/07/17/669699161ca21.png" alt="微信图片_20240717000004.png"><br>    - docker-compose up –-build -d 起容器<br><img src="https://pic.imge.cc/2024/07/17/66969ab584b3f.png" alt="微信图片_20240717000659.png"><br>    （vi docker-compose.yml进入该文件编译界面，修改参数，使其后序端口能被利用）<br><img src="https://pic.imge.cc/2024/07/17/66969bbcb7f34.png" alt="微信图片_20240717001006.png"></p><p>环境搭建完成，放入nc中跑出pwn题目<br><img src="https://pic.imge.cc/2024/07/17/66969c95e871f.png" alt="微信图片_20240717001504.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn学习中虚拟机ubuntu的使用教程</title>
      <link href="/2024/07/14/pwn%E4%B8%AD%E8%99%9A%E6%8B%9F%E6%9C%BAubuntu%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/07/14/pwn%E4%B8%AD%E8%99%9A%E6%8B%9F%E6%9C%BAubuntu%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-VM的下载"><a href="#1-VM的下载" class="headerlink" title="1.VM的下载"></a>1.VM的下载</h2><pre><code>* 官网下载：https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html因为VM是一直更新的，过几个月可能就会换版本，所以直接去官网下载最新的最好。下载完后是一个exe文件，双击运行。</code></pre><p><img src="https://pic.imge.cc/2024/07/15/66949708548a5.png" alt="20240715112620.png"><br>    需要点两个下一步，之后可以选择安装位置，建议自己创一个文件夹安装。选完路径后一路下一步就行。<br>    在这之后会需要许可证密钥，百度搜索“vm17密钥许可证”即可，这里不演示。</p><h2 id="2-Ubuntu-22-04镜像"><a href="#2-Ubuntu-22-04镜像" class="headerlink" title="2.Ubuntu 22.04镜像"></a>2.Ubuntu 22.04镜像</h2><pre><code>* 官网下载：https://ubuntu.com/download/desktop</code></pre><p><img src="https://pic.imge.cc/2024/07/15/66949dfb28b8b.png" alt="20240715115624.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2024/07/12/docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/12/docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-docker初学"><a href="#1-docker初学" class="headerlink" title="1.docker初学"></a>1.docker初学</h2><h3 id="1）docker概述"><a href="#1）docker概述" class="headerlink" title="1）docker概述"></a>1）docker概述</h3><pre><code># Docker是一个开源的应用容器引擎，基于Go语言，并遵从Apache2.0协议开源。# Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。# 容器是完全使用沙箱机制，相互之间不会有任何接口（类似iPhone的app），更重要的是容器性能开销极低。</code></pre><h3 id="2）docker的基本组成"><a href="#2）docker的基本组成" class="headerlink" title="2）docker的基本组成"></a>2）docker的基本组成</h3><pre><code>- 镜像（Image） ：docker镜像就好比一个模板，我们可以通过这个模板来创建容器服务，tomcat镜像===&gt;run==&gt;tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。- 容器（container）：docker利用容器技术，独立运行一个或者一组应用。通过镜像来创建、启动、停止、删除、基本命令！目前就可以把这个容器理解为就是一个简易的linux系统。- 仓库（repository）：仓库就是存放镜像（image）的地方！仓库又可以分为公有仓库和私有仓库</code></pre><p><img src="https://pic.imge.cc/2024/07/13/66920f9b0fc56.jpeg" alt="docker1.jpeg"></p><h2 id="2-docker安装"><a href="#2-docker安装" class="headerlink" title="2.docker安装"></a>2.docker安装</h2><h3 id="1）卸载系统之前可能安装的docker"><a href="#1）卸载系统之前可能安装的docker" class="headerlink" title="1）卸载系统之前可能安装的docker"></a>1）卸载系统之前可能安装的docker</h3><pre><code># 防止版本不一致，产生冲突，但一般我们使用我们新开的服务器就没有这种可能，这一步可以省略- sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine- （在CentOS中，“\”符号表示执行下一行指令</code></pre><h3 id="2）安装docker-CE基本环境"><a href="#2）安装docker-CE基本环境" class="headerlink" title="2）安装docker-CE基本环境"></a>2）安装docker-CE基本环境</h3><pre><code># 安装必须的依赖，安装所需的软件包：- sudo yum install -y yum-utils</code></pre><p><img src="https://pic.imge.cc/2024/07/14/6692add299c2e.png" alt="20240714003918.png"><br>    #设置仓库，设置 docker repo 的 yum 位置<br>    -  sudo yum-config-manager \<br>       –add-repo \<br>       <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br><img src="https://pic.imge.cc/2024/07/14/6692ae13dc5e9.png" alt="20240714004028.png"><br>    # 安装 docker，以及 docker-cli(使用Docker仓库进行安装)<br>    - sudo yum install docker-ce docker-ce-cli containerd.io<br><img src="https://pic.imge.cc/2024/07/14/6692ae9953266.png" alt="20240714004248.png"></p><h3 id="3）-启动-docker"><a href="#3）-启动-docker" class="headerlink" title="3） 启动 docker"></a>3） 启动 docker</h3><pre><code>- 启动Docker:sudo systemctl start docker- 开启自启动Docker:systemctl enable docker- 注意：以上操作均在[adming~]操作指令下进行，但启动docker时应在[root~]操作指令下，输入：sudo su 进入[root~]操作指令后再进行以上启动docker的指令</code></pre><p><img src="https://pic.imge.cc/2024/07/14/6692b060b527e.png" alt="20240714005025.png"></p><p>完成Docker的安装</p><h2 id="3-docker基本命令"><a href="#3-docker基本命令" class="headerlink" title="3.docker基本命令"></a>3.docker基本命令</h2><h3 id="1）docker进程相关命令"><a href="#1）docker进程相关命令" class="headerlink" title="1）docker进程相关命令"></a>1）docker进程相关命令</h3><pre><code>- 启动docker服务 systemctl start docker- 停止docker服务 systemctl stop docker- 重启docker服务 systemctl restart docker- 查看docker服务状态 systemctl status docker- 开机启动docker服务 systemctl enable docker- 查看dockers版本型号 docker version                     docker info</code></pre><h3 id="2）docker镜像相关命令"><a href="#2）docker镜像相关命令" class="headerlink" title="2）docker镜像相关命令"></a>2）docker镜像相关命令</h3><pre><code>- docker search 镜像id或name：在Docker Hub（或其他镜像仓库如阿里镜像）仓库中搜索关键字的镜像- docker pull 镜像id或name：从仓库中下载镜像，若要指定版本，则要在冒号后指定- docker images：列出已经下载的镜像，查看镜像- docker rmi 镜像id或name：删除本地镜像- docker rmi -f 镜像id或name: 删除镜像- docker build：构建镜像</code></pre><h3 id="3）docker容器相关命令"><a href="#3）docker容器相关命令" class="headerlink" title="3）docker容器相关命令"></a>3）docker容器相关命令</h3><pre><code>- docker ps：列出运行中的容器- docker ps -a ： 查看所有容器，包括未运行- docker stop 容器id或name：停止容器- docker kill 容器id：强制停止容器- docker start 容器id或name：启动已停止的容器- docker inspect 容器id：查看容器的所有信息- docker container logs 容器id：查看容器日志- docker top 容器id：查看容器里的进程- docker exec -it 容器id /bin/bash：进入容器- docker rm 容器id或name：删除已停止的容器- docker rm -f 容器id：删除正在运行的容器- docker exec -it 容器ID sh :进入容器</code></pre><h2 id="4-dockerfile学习"><a href="#4-dockerfile学习" class="headerlink" title="4.dockerfile学习"></a>4.dockerfile学习</h2><h3 id="1）什么是dockerfile"><a href="#1）什么是dockerfile" class="headerlink" title="1）什么是dockerfile"></a>1）什么是dockerfile</h3><pre><code>- dockerfile是一种用于定义和构建docker镜像的文本文件。它包含一系列的指令和参数，用于描述镜像的构建过程，包括基础映像、软件包安装、文件拷环境变量设置等。</code></pre><p><img src="https://pic.imge.cc/2024/07/17/669764e89f169.png" alt="20240717142936.png"><br>    - 通过编写dockerfile，可以将应用程序、环境、和依赖项打包成一个独立的容器镜像，使其可以在不同的环境和平台上运行，实现应用程序的可移植性和可扩展性。<br>总的来说，dockerfile是定义和构建docker镜像的文本文件，通过编写指令和参数来描述镜像的构建过程和配置，以实现应用程序的打包和部署。它是使用docker进行容器化开发和部署的重要工具。</p><h3 id="2）dockerfile构建步骤"><a href="#2）dockerfile构建步骤" class="headerlink" title="2）dockerfile构建步骤"></a>2）dockerfile构建步骤</h3><pre><code>- 1.编写dockerfile文件- 2.docker build 构建镜像- 3.docker run 镜像</code></pre><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><pre><code>* 每条保留字指令都必须为大写字母且后面要跟随至少一个参数* 指令按照从上到下，顺序执行* # 表示注释* 每条指令都会创建一个新的镜像层，并对镜像进行提交</code></pre><h3 id="3）dockerfile指令"><a href="#3）dockerfile指令" class="headerlink" title="3）dockerfile指令"></a>3）dockerfile指令</h3><p><img src="https://pic.imge.cc/2024/07/17/6697695a416fe.png" alt="3.png"></p><h3 id="4）构建镜像命令"><a href="#4）构建镜像命令" class="headerlink" title="4）构建镜像命令"></a>4）构建镜像命令</h3><pre><code>- 编译好dockerfile，将他编译成镜像 - docker build -f Dockerfile -t mycentos:1.0 .（点代表当前目录）（-f：等价于--file，指定 dockerfile 文件；-t：等价于--tag，指定输出的镜像文件名:版本号）- docker history 查看镜像的变更历史</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器的基本使用</title>
      <link href="/2024/07/11/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/07/11/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="阿里云服务器-轻量应用服务器"><a href="#阿里云服务器-轻量应用服务器" class="headerlink" title="阿里云服务器-轻量应用服务器"></a>阿里云服务器-轻量应用服务器</h2><h3 id="1）学习轻量应用服务器"><a href="#1）学习轻量应用服务器" class="headerlink" title="1）学习轻量应用服务器"></a>1）学习轻量应用服务器</h3><pre><code>- 自行通过阿里云天工开物活动领取优惠卷购置一台服务器（国内外均可，推荐轻量应用服务器-新加坡2h1g-https://university.aliyun.com/）- 阿里云轻量服务器相较于云服务器ECS使用更简单，具体使用轻量服务器实现学习远程连接、搭建网站、开放端口等详细操作流程</code></pre><h3 id="2）轻量应用服务器使用教程"><a href="#2）轻量应用服务器使用教程" class="headerlink" title="2）轻量应用服务器使用教程"></a>2）轻量应用服务器使用教程</h3><pre><code># 阿里云轻量应用服务器是在云服务器ECS推出的轻量级云服务器，可视化运维使用更简单，使用清凉服务器的应用镜像可以快速搭建网站，关于轻量应用服务器使用教程如下：- 使用轻量应用服务器管理控制台进行远程连接（正常买过服务器后进入轻量应用服务器后就能找到自己购买的服务器了）点左侧“服务器列表”即可看到当前账号下的轻量应用服务器，点击右上角的远程连接即可。如果不知道轻量应用服务器的账号密码，可以重置服务器密码。- 轻量服务器远程连接支持控制台Workbench、VNC及第三方客户端工具（Putty、Xshell等）等多种连接方式（这些暂时用不到）</code></pre><p><img src="https://pic.imge.cc/2024/07/13/66926df16f9d8.png" alt="20240713200624.png"></p><h3 id="3）轻量应用服务器开放端口教程"><a href="#3）轻量应用服务器开放端口教程" class="headerlink" title="3）轻量应用服务器开放端口教程"></a>3）轻量应用服务器开放端口教程</h3><pre><code>- 阿里云轻量应用服务器端口开放或禁用是通过防火墙来设置的</code></pre><p><img src="https://pic.imge.cc/2024/07/13/66926e27ce766.png" alt="20240713200640.png"></p><p>一切完成后点击远程连接即进入自己的服务器，开始使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建个人博客</title>
      <link href="/2024/07/10/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/07/10/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载并安装-Node-js"><a href="#1-下载并安装-Node-js" class="headerlink" title="1. 下载并安装 Node.js"></a>1. 下载并安装 Node.js</h2><pre><code># 安装教程  - 访问 [Node.js官网](https://nodejs.org/) 下载对应系统的安装包。  - 双击安装包，按照默认设置或自定义路径进行安装。  - 安装过程中请留意安装选项，确保选择添加Node.js到系统PATH环境变量。  # 验证安装  - 打开命令行界面（在Windows上按`Win + R`，输入`cmd`，然后回车）。  - 输入命令 `node -v` 并回车，如果正确显示Node.js版本号，则安装成功。  </code></pre><h2 id="2-下载并安装-Git"><a href="#2-下载并安装-Git" class="headerlink" title="2. 下载并安装 Git"></a>2. 下载并安装 Git</h2><pre><code># 安装教程  https://blog.csdn.net/mukes/article/details/115693833- 访问 [Git官网](https://git-scm.com/) 或 [Git for Windows](https://gitforwindows.org/) 下载对应系统的安装包。  - 双击安装包，按照安装向导逐步进行。  - 注意选择适当的安装选项，如安装路径、组件选择等。  - 确保选择“使用Git Bash”以及“从命令行以及第三方软件进行Git”等选项，以优化Git的使用体验。  # 验证安装  - 在任意文件夹下，按住`Shift`键并右击，选择“在此处打开Git Bash”。  - 输入命令 `git version` 并回车，如果正确显示Git版本号，则安装成功。  </code></pre><h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3. 安装 Hexo"></a>3. 安装 Hexo</h2><pre><code># 安装前提  https://blog.csdn.net/weixin_42242910/article/details/136297201- 确保已经按照上述步骤成功安装了Node.js和Git。  - 安装并配置了cnpm（Node.js安装教程中包含cnpm的安装方法）。  # 安装教程  - 打开命令行界面（cmd）。（win+R打开运行，输入cmd进入系统的cmd）  - 输入命令 `cnpm install -g hexo-cli` 并回车，等待安装完成。  # 验证安装  - 在命令行界面输入命令 `hexo -v` 并回车，如果正确显示Hexo版本号，则安装成功。  </code></pre><p>  <img src="https://pic.imge.cc/2024/07/12/6690b1423d9bd.png" alt="20240712111345.png"></p><h2 id="4-创建Github账号并配置好环境"><a href="#4-创建Github账号并配置好环境" class="headerlink" title="4. 创建Github账号并配置好环境"></a>4. 创建Github账号并配置好环境</h2><h3 id="1）创建Github账号"><a href="#1）创建Github账号" class="headerlink" title="1）创建Github账号"></a>1）创建Github账号</h3><pre><code># 创建账号指引  https://blog.csdn.net/m0_67906358/article/details/128808210- 在你的 GitHub 上建立名为 **&lt;你的 GitHub 用户名&gt;.github.io** 的仓库。这里参考 《GitHub Pages 快速入门》 即可。</code></pre><h3 id="2）设置ssh"><a href="#2）设置ssh" class="headerlink" title="2）设置ssh"></a>2）设置ssh</h3><pre><code># 配置ssh免密登录  https://blog.csdn.net/weixin_42310154/article/details/118340458- ssh登录是非对称加密，产生密钥对(public key 和 private key)，在git中产生命名为id_rsa.pub,id_rsa- 打开git bash输入(自行安装ssh):ssh-keygen -t rsa -C ‘注册时的邮箱地址’，一路回车- 成功后在文件中找到C盘目录(此文件夹所在C:\用户\用户名\.ssh文件目录下)使用记事本打开id_rsa.put文件并复制生成的key，粘贴到github的SSH keys中。- 验证配置是否成功 git bash中输入：ssh -T git@github.com 注意:要输入yes</code></pre><h3 id="3）绑定用户名和邮箱"><a href="#3）绑定用户名和邮箱" class="headerlink" title="3）绑定用户名和邮箱"></a>3）绑定用户名和邮箱</h3><pre><code># 接着在本地绑定与Github的用户名和邮箱- 输入命令：git config --global user.name “注册时用户名”- 输入命令：git config --global user.email “注册时邮箱”</code></pre><h2 id="5-本地配置安装Hexo"><a href="#5-本地配置安装Hexo" class="headerlink" title="5. 本地配置安装Hexo"></a>5. 本地配置安装Hexo</h2><h3 id="1）本地初始化blog"><a href="#1）本地初始化blog" class="headerlink" title="1）本地初始化blog"></a>1）本地初始化blog</h3><pre><code># 在磁盘中创建一个用来存放Github本地仓库文件的目录（建议将文件名设为blog）- 之后就是初始化Hexo,输入命令：hexo init,然后在blog文件下自动生成许多文件(这里不多介绍这些文件及目录)- 输入命令：hexo s，这时启动hexo之后在浏览器输入localhost:4000就可以在本地浏览博客（自带一篇Hello World博客）</code></pre><p>  <img src="https://pic.imge.cc/2024/07/12/6690cbda311ab.png" alt="20200331214731382.png"></p><h3 id="2）修改blog文件中生成的-config-yml文件"><a href="#2）修改blog文件中生成的-config-yml文件" class="headerlink" title="2）修改blog文件中生成的_config.yml文件"></a>2）修改blog文件中生成的_config.yml文件</h3><pre><code># 把_config,yml文件用记事本打开，在文件的末尾修改(repository属性的地址就是之前创建仓库后所保存的http地址)</code></pre><p><img src="https://pic.imge.cc/2024/07/12/6690cd30c2ad3.png" alt="20240712142832.png"></p><h3 id="3）上传到github库中"><a href="#3）上传到github库中" class="headerlink" title="3）上传到github库中"></a>3）上传到github库中</h3><pre><code># 此时需要安装一个上传工具- blog文件夹下 git bash输入:npm install hexo-deployer-git –-save- 生成一遍文件,输入命令：hexo g（生成页面）- 最后直接部署到Github就可以啦，输入命令：hexo d（上传）</code></pre><p>第一次上传文件到Github仓库邮箱还会收到一封邮件<br>然后在Github仓库查看就发现多了很多文件<br>此时再浏览器输入：用户名.github.io(Github仓库名)就可以访问博客啦</p><h2 id="6-为自己的blog选择一个主题"><a href="#6-为自己的blog选择一个主题" class="headerlink" title="6. 为自己的blog选择一个主题"></a>6. 为自己的blog选择一个主题</h2><h3 id="butterfly主题示例（我个人选择的butterfly）"><a href="#butterfly主题示例（我个人选择的butterfly）" class="headerlink" title="butterfly主题示例（我个人选择的butterfly）"></a>butterfly主题示例（我个人选择的butterfly）</h3><pre><code>https://butterfly.js.org/posts/21cfbf15/# 在blog文件下打开git bash输入：git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly- 修改_config.yml文件中的theme: butterfly- 安装插件,如果你没有 pug 以及 stylus 的渲染器，需要下载安装：npm install hexo-renderer-pug hexo-renderer-stylus --save                                                           npm install hexo-deployer-git –-save</code></pre><p><img src="https://pic.imge.cc/2024/07/12/6690d4b8c9361.png" alt="20240712150050.png"></p><h2 id="7-markdown语法学习"><a href="#7-markdown语法学习" class="headerlink" title="7.markdown语法学习"></a>7.markdown语法学习</h2><pre><code># 这里就不过多介绍，这个网站内容十分详细https://markdown.com.cn/basic-syntax/emphasis.html</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 开发环境安装指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/09/hello-world/"/>
      <url>/2024/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
